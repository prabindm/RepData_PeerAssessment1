det(x)
x$get
makecachematrix(x)
$get
makecachematrix(x)
x$getinv
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x
setinv <- function(inv) inv <<- solve
getinv <- function() inv
list( get = get, set = set,
getinv = getinv,
setinv = setinv)
}
cachesolve <- function(x, ...){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function()x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get =get,
setmean = setmean,
getmean = getmean)
}
cacheMean <- function(x, ...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
y <- sample( 5:30, 5)
y
makeVector(y)
cacheMean(y)
makeVector$get
plusFunction <- function() {
plustwo <- function(y){
x <- y + 2
return(x)
}
plusthree <- function(){
x <- y + 3
return(x)
}
list(plustwo = plustwo, plusthree=plusthree)
}
plusFunction(x)
plusFunction()
plusFunction(3)
pf <- plusFunction(3)
plusFunction(4)
plustwo(3)
plusFunction()
pf <- plusFunction()
pf(3)
pf
pf$plustwo(x)
pf$plustwo(5)
makecachematrix(x)
makecachematrix()
makeVector(y)
cacheMean(y)
y
a <- makeVector(y)
cacheMean(a)
a <- makecachematrix(x)
cachesolve(a)
a$get
a$get()
a$set()
a$set(y)
a$setinv()
a$getinv()
cachesolve(a)
makecachematrix(a)
a <- makecachematrix(x)
cachesolve(a)
cachesolve(a)
b <- makeVector(y)
cacheMean(b)
cacheMean(b)
a <- makecachematrix(x)
cachesolve(a)
cachesolve(a)
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list( get = get, set = set,
getinv = getinv,
setinv = setinv)
}
## Write a short comment describing this function
cachesolve <- function(x, ...){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
a <- makecachematrix(x)
cachesolve(a)
cachesolve(a)
rm(makecachematrix, cachesolve)
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list( get = get, set = set,
getinv = getinv,
setinv = setinv)
}
## Write a short comment describing this function
cachesolve <- function(x, ...){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
a <- makecachematrix(x)
a$getinv()
a$setinv()
a$setinv(x)
a$setinv(solve)
a$set(y)
a$get()
a$get(x)
rm(makecachematrix, cachesolve)
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list( get = get, set = set,
getinv = getinv,
setinv = setinv)
}
## Write a short comment describing this function
cachesolve <- function(x, ...){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
a <- makecachematrix(x)
a$get()
a$set
a$getinv()
a$getinv(x)
c <- a$getinv(x)
c <- a$getinv()
c(x)
inv
a&get
a&get()
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
}
get <- function()x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list( get = get, set = set,
getinv = getinv,
setinv = setinv)
}
cachesolve <- function(x, ...){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
a <- makecachematrix(x)
cachesolve(a)
cachesolve(a)
cachesolve(x)
a$getinv(cachesolve(a))
z <- cachesolve(a)
a$getinv(z)
a$getinv()
rm(cachesolve, makecachematrix, z)
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list( get = get, set = set,
getinv = getinv,
setinv = setinv)
}
## Write a short comment describing this function
cachesolve <- function(x, ...){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makecachematrix(x)
a <- makecachematrix(x)
a
a$get()
a$set()
a$getinv
a$getinv()
a$setinv()
z <- cachesolve(a)
a
z
a$get
a$get()
a$getinv()
npts <− 100
x <− runif(n = npts)
y <− 0
for (i in 1:npts) {
if (x[i]>0.5)
y[i] <− 1
else
y[i] <− 0
}
npts <− 100
x <− runif(n = npts)
y <− 0
for (i in 1:npts) {
if (x[i]>0.5)
y[i] <− 1
}
else
{y[i] <− 0
}
npts <− 100
x <− runif(n = npts)
y <− 0
for (i in 1:npts) {
if (x[i]>0.5) {y[i] <− 1}
else {y[i] <− 0}
}
npts <− 100
x <− runif(n = npts)
y <− 0
npts <− 100
x <− runif(n = "npts")
y <− 0
x <- 20
y <- runif(x)
y
npts <- 100
x <- runif( n = npts)
y <- 0
for (i in 1:npts){if(x[i]> 0.5) {y[i] <- 1} else {y[i] <- 0}}
y
y <- rep(0, npts)
for (i in 1:npts){if(x[i]> 0.5) {y[i] <- 1} else {y[i] <- 0}}
y
install.packages("swirl")
library(swirl)
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
library("swirl")
swirl()
library(swirl)
swirl()
getwd()
library(ggplot2)
install.packages("ph525x")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
biocLite(c("genefilter","geneplotter"))
library(Biobase)
detach(Biobase)
library(ph525x)
sessionInfo()
library(devtools)
install.packages("devtools")
library(devtools)
install_github("genomicclass/ph525x")
install_github("genomicsclass/ph525x")
install.packages("BSgenome.Hsapiens.UCSC.hg19")
install_github("genomicsclass/BSgenome.Hsapiens.UCSC.hg19")
biocLite("BSgenome.Hsapiens.UCSC.hg19
")
library(BiocInstaller)
biocLite("BSgenome.Hsapiens.UCSC.hg19")
biocLite("SNPlocs.Hsapiens.dbSNP.20120608")
biocLite("Homo.sapiens")
library(devtools)
install_github("genomicsclass/GSE5859Subset")
bioClite("COPDSexualDimorphism.data")
biocLite("COPDSexualDimorphism.data")
library(COPDSexualDimorphism.data)
data("lgrc.genes")
with(expr.meta, table(gender, diagmaj))
data("lgrc.expr.genes")
data("lgrc.expr.meta")
with(expr.meta, table(gender, diagmaj))
library(Homo.sapiens)
orfunc <- select(Homo.sapiens, key = "ORMDL3", keytype = "SYMBOL", columns = c("GO", "TERM"))
orfunc[,c("GO", "TERM")]
orfunc[,c("ONTOLOGY", "TERM")]
head(Homo.sapiens)
?ExpressionSet
data("sample.ExpressionSet")
sample.ExpressionSet
esetDet1()
data(tissuesGeneExpression)
library(tissuesGeneExpression)
e
data(tissuesGeneExpression)
e[1:5, 1:6]
data(tissuesGeneExpression)
View(e)
View(e)
e[1,1]
e[1007_s_at,]
e[,1007_s_at]
e["1007_s_at",]
table(tissues)
table(tissue)
tissue
eTissue <- e
colnames(eTissue) <- tissue
eTissue[1:5, 1:6]
eTissue[1:5, 16:20]
library(dplyr)
install.packages("dplyr")
install.packages("reshape")
library(xlsx)
install.packages("xlsx")
ls
ls()
nfit
sE
x
o
ok
?Math2
Arith()
library(GSE5859Subset)
data(GSE859Subset)
library(GSE5859Subset)
data(GSE5859Subset)
data(GSE5859Subset)
head(sampleInfo)
?t.test
t.test(1:10, y =c(7:20))
1:10
7:20
c(7:20, 200)
head(sleep)
with(sleep, t.test(extra[group == 1], extra[group == 2]))
t.test(extra ~ group, data = sleep)
install.packages("tidyr")
install.packages("stingr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggvis")
install.packages("htmlwidgets")
install.packages("googlevis")
install.packages("googleVis")
install.packages("car")
install.packages("mgcv")
install.packages("glmnet")
install.packages("randomForest")
install.packages("lme4/nime")
install.packages("nime")
install.packages(multicomp)
install.packages("multicomp")
install.packages("multcomp")
install.packages("vcd")
install.packages("data.table")
install.packages("parallel")
install.packages("parallel")
biocLite("Bioparallel")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
library(hgu95av2.db)
library(tissuesGeneExpression)
data(tissueGeneExpression)
data(tissuesGeneExpression)
data("sample.ExpressionSet")
exprs(e)
sample.ExpressionSet
assayData(sample.ExpressionSet)
assayData()
samp <- sample.ExpressionSet
exprs(samp)
dim(exprs(samp))
pData(samp)
samp["31489_at",]
samp[,"31489_at"]
exprs(samp)["31489_at",]
boxplot(exprs(samp)["31489_at",]~ pData(samp))
cor(exprs(samp)["31489_at",])
cor(exprs(samp)["31489_at",], y = NULL)
cor(exprs(samp)["31489_at",], y = pData(samp))
cor(exprs(samp)["31489_at",], y = pData(samp)$type)
cor(exprs(samp)["31489_at",], y = pData(samp)$score)
setwd("Documents/Data-science/Rerproducible Research/")
install.packages("Amelia")
setwd("test")
list.files()
zip.file.extract(file, zipname = "activity.zip", unzip = getOption("unzip"))
unzip(activity.zip)
unzip("activity.zip")
unz("activity.zip")
?unz
setwd("~/Documents/Data-science//Rerproducible Research")
setwd("~/Documents/Data-science//Rerproducible Research")
#read data
library(dplyr)
library(ggplot2)
require(scales)
activity <- read.csv("activity.csv",header = TRUE)
getwd()
setwd("test/")
setwd("~/Documents/Data-science//Rerproducible Research")
activity <- read.csv(unzip(test, "activity.csv"))
temp <- tempfile()
download.file("http://www.newcl.org/data/zipfiles/a1.zip",temp)
getwd()
list.files()
setwd("test/")
unzip("activity.zip", exdir = "./")
unzip("activity.zip")
setwd("~/Documents/Data-science/Rerproducible Research/RepData_PeerAssessment1/")
setwd("~/Documents/Data-science/Rerproducible Research/RepData_PeerAssessment1/")
#read data
library(dplyr)
library(ggplot2)
require(scales)
activity <- read.csv("activity.csv",header = TRUE)
#process data
str(activity)
